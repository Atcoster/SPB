#include "pitches.h"
#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define RST_PIN               9       // Configurable, see typical pin layout above nfc
#define SS_PIN                10      // Configurable, see typical pin layout above nfc

#define TRIGGER_PIN           46      // Arduino pin tied to trigger pin on the ultrasonic sensor.
#define ECHO_PIN              26      // Arduino pin tied to echo pin on the ultrasonic sensor.
#define MAX_DISTANCE          200     // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.


LiquidCrystal_I2C lcd(0x27, 16, 2);   // Set the LCD address to 0x27 for a 16 chars and 2 line display

MFRC522 mfrc522(SS_PIN, RST_PIN);     // Create MFRC522 instance

const int speakerOut        = 44;     // the number of the sound pin

const int ledPin            = 45;     // the number of the LED pin
boolean ledState            = LOW;    // storage for the current state of the LED (off/on)

//NFC accepted id's
String read_rfid;

String  ok_rfids[4]           = {"5d771b0", "9c3ad835", "0000000", ""}; //nfc acceptable id's
boolean registered_rfids[4]   = {}; //nfc registered id's array
String  users[4]              = {"", "", "", ""}; //nfc registered names
boolean isUsersHome[4]        = {}; //is user at home?
boolean keyRegistered;

long duration, distance;

String NR = "NR";

// Array with the notes in the melody (see pitches.h for reference)
int melody[] = {
  NOTE_E7, NOTE_E7, 0, NOTE_E7, 
  0, NOTE_C7, NOTE_E7, 0,
  NOTE_G7, 0, 0,  0,
  NOTE_G6, 0, 0, 0 
  };

// Array with the note durations: a quarter note has a duration of 4, half note 2 etc.
int durations[]  = {
  12, 12, 12, 12, 
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12 
};

int tempo = 160; // tempo for the melody expressed in beats per minute (BPM)

void setup() {
  Serial.begin(9600);                 // Initialize serial communications with the PC 
  while (!Serial);                    // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();                        // Init SPI bus
  mfrc522.PCD_Init();                 // Init MFRC522

  // initialize the LCD
  lcd.begin();
  // Turn on the blacklight and print a message.
  lcd.setBacklight(HIGH);
 
  Serial.println(F("Welcome to Smart Presence Box (SPB)"));
  Serial.println(F("Please scan your Key to start...."));

  lcd.setCursor(0, 0);
  lcd.print("   Welcome to  ");
  lcd.setCursor(0, 1);
  lcd.print("      S.P.B   ");
      
  pinMode(speakerOut, OUTPUT);
  pinMode(ledPin, OUTPUT);

  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  isUsersHome[0] = false;
  isUsersHome[1] = false;

  registered_rfids[0] = false;
  registered_rfids[1] = false;
  keyRegistered       = false; 
}

String scanKeyText  = "Scan your key to check in and out";

void loop() {
  checkDoorState();
  nfcCardSetup();  
  if(keyRegistered){    
     Serial.println(scanKeyText);
     keyRegistered = false;
  }
}

void checkDoorState(){  
  digitalWrite(TRIGGER_PIN, LOW);  // Added this line
  delayMicroseconds(2); // Added this line
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10); // Added this line
  digitalWrite(TRIGGER_PIN, LOW);
  duration = pulseIn(ECHO_PIN, HIGH);
  distance = (duration/2) / 29.1;
  
  if (distance <= 10) {       // check if door is open
    //Serial.println("Door closed");
  }else {
    //Serial.println("Door is open");
    playMelody(melody, durations, tempo);
  }
  
  //Serial.print(distance);
  delay(500);
}

void beep(unsigned char soundHight ){
  analogWrite(44, soundHight);      // Almost any value can be used except 0 and 255
}

void playMelody(int notes[], int durations[], int BPM){
  int tuneSize = sizeof(melody) / sizeof(int);
  
  // iterate over the notes of the tune:
  for (int thisNote = 0; thisNote < tuneSize; thisNote++) {    
    int noteDuration = (int)((1000 * (60 * 4 / BPM)) / durations[thisNote] + 0.);
    tone(speakerOut, notes[thisNote],noteDuration);

    // to distinguish the notes, set a minimum time between them.
    // the note's duration + 20% seems to work well:
    int pauseBetweenNotes = noteDuration * 1.20;
    delay(pauseBetweenNotes);
    // stop the tone playing:
    noTone(speakerOut);
  }
}

void light(boolean lightup){
  digitalWrite(ledPin, lightup);    //toggle the state of the LED    
}  

void nfcCardSetup(){
  // Look for new cards
  if ( ! mfrc522.PICC_IsNewCardPresent()) {
    light(0);
    return;
  }
  
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) {    
    return;
  }else{
    light(1);
    beep(3);
    dumb_byte_array(mfrc522.uid.uidByte, mfrc522.uid.size);
    delay(50);    
    Serial.println("The NFC tag id = " + read_rfid); 
    beep(0);  
    if(read_rfid == ok_rfids[0]){
      if(!registered_rfids[0]){
        registerUser(0);
      }else{
        changeUserStatus(0);
      }
    }
    else if(read_rfid == ok_rfids[1]){
      if(!registered_rfids[1]){
        registerUser(1);
      }else{
        changeUserStatus(1);
      }
    }     
  }   
}

void dumb_byte_array(byte *buffer, byte bufferSize) {
  read_rfid = "";
  for (byte i = 0; i < bufferSize; i++) {
    read_rfid = read_rfid + String(buffer[i], HEX);
  }
}

String writeName      = "NFC Key is not registered yet(NR)....please write your desired name (max length 10)...press send and scan your key again to complete the procedure.. ";
String errorReg       = "The name is to long(max length 10) or nothing filled... Please try again!!";
String tagAlreadyReg  = "NFC Key " + read_rfid + " is already registered ";

void registerUser(int userID){
    if(users[userID] == ""){
      if(Serial.available() > 0 && Serial.available() <= 10){         
            users[userID] = Serial.readStringUntil('\n');
            registered_rfids[userID] = true;                    
            keyRegistered = true;
            delay(2000);
            if(registered_rfids[userID] && users[userID] != ""){
              Serial.println("Tag id " + ok_rfids[userID] + " with the name " + users[userID] + " with succes registered");
              isUsersHome[userID] = true;
              displayAllUsersStatus();
            }
       }else{
        Serial.println(writeName);
      }
    }   
   delay(3000);
}

void changeUserStatus(int userID){
    String userStat;
    if(!isUsersHome[userID]){
        isUsersHome[userID] = true;
        userStat = "At Home";        
    }else{
       isUsersHome[userID] = false;
       userStat = "Not at Home";
    }

    Serial.println(tagAlreadyReg + "under username = " + users[userID] + " and the user's status = " + userStat);
    displayAllUsersStatus();
    delay(3000);
}

void displayAllUsersStatus(){
  lcd.clear();
  if(users[0] != ""){    
    lcd.setCursor(0, 0);
    if(isUsersHome[0]){
      lcd.print(users[0] + " = IN");
    }else{
      lcd.print(users[0] + " = OUT");
    }
  }else{
      lcd.setCursor(0, 0);
      lcd.print("User 1 " + NR);
  }

  if(users[1] != ""){
    lcd.setCursor(0, 1);
    if(isUsersHome[1]){
      lcd.print(users[1] + " = IN");
    }else{
      lcd.print(users[1] + " = OUT");
    }
  }else{
    lcd.setCursor(0, 1);
    lcd.print("User 2 " + NR);
  }
}



